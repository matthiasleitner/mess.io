// Generated by CoffeeScript 1.3.3

/*
 Module dependencies
*/


(function() {
  var AccessLog, DeviceController, MessageController, MessageWorker, RedisStore, Resource, ServerLog, SocketController, SocketRedisStore, User, UserController, WebClientController, app, applications, bunyan, cluster, coffeeScript, config, cookie, deviceController, devices, express, fs, http, https, io, kue, log, messageController, messageWorker, messages, path, pub, redis, redisPassword, server, sessionStore, socketController, socketio, store, sub, userController, users, webClientController;

  path = require('path');

  https = require("https");

  http = require("http");

  fs = require("fs");

  express = require('express');

  bunyan = require('bunyan');

  coffeeScript = require('coffee-script');

  config = require('./config').settings;

  redis = require('redis');

  socketio = require('socket.io');

  RedisStore = require('connect-redis')(express);

  SocketRedisStore = require("socket.io/lib/stores/redis");

  SocketController = require('./app/controllers/socket_controller');

  WebClientController = require('./app/controllers/web_client_controller');

  Resource = require('express-resource');

  User = require('./app/models/user');

  MessageWorker = require('./app/workers/message_worker');

  kue = require('kue');

  cookie = require('cookie');

  cluster = require("cluster");

  /*
    Catch exceptions
  */


  /*
   Logging
  */


  ServerLog = bunyan.createLogger({
    name: "ServerLog",
    streams: [
      {
        path: path.join(__dirname, "logs", "server.log")
      }
    ]
  });

  AccessLog = bunyan.createLogger({
    name: "AccessLog",
    streams: [
      {
        path: path.join(__dirname, "logs", "access.log")
      }
    ]
  });

  log = bunyan.createLogger({
    name: "CustomLog",
    streams: [
      {
        path: path.join(__dirname, "logs", "custom.log")
      }
    ]
  });

  /*
   Server
  */


  app = express();

  sessionStore = redis.createClient();

  app.configure(function() {
    app.set("port", process.env.PORT || config.port);
    app.use(express.compress());
    app.use(express.bodyParser({
      uploadDir: path.join(__dirname, '/public/tmp')
    }));
    app.use(express.methodOverride());
    app.use(express.cookieParser());
    app.use(express.session({
      secret: process.env.CLIENT_SECRET || "super secret string",
      maxAge: new Date(Date.now() + 7200000),
      store: new RedisStore({
        client: sessionStore
      })
    }));
    app.use('/js', express["static"](path.join(__dirname, '/public/js')));
    app.use('/css', express["static"](path.join(__dirname, '/public/css')));
    app.set("view engine", "jade");
    app.set("views", path.join(__dirname, "app/views"));
    app.use(express.favicon());
    return app.use(express.logger("dev"));
  });

  /*
   Start listening to port
  */


  server = http.createServer(app).listen(app.get("port"), function() {
    return console.log("Express server listening on port " + app.get("port"));
  });

  /*
   Socket.io
  */


  io = socketio.listen(config.socketIOPort);

  io.set("log level", 3);

  pub = redis.createClient();

  sub = redis.createClient();

  store = redis.createClient();

  redisPassword = "";

  pub.auth(redisPassword, function(err) {
    if (err) {
      throw err;
    }
  });

  sub.auth(redisPassword, function(err) {
    if (err) {
      throw err;
    }
  });

  store.auth(redisPassword, function(err) {
    if (err) {
      throw err;
    }
  });

  io.configure(function() {
    io.enable("browser client minification");
    io.enable("browser client etag");
    io.enable("browser client gzip");
    io.set("log level", 0);
    io.set("transports", ["websocket", "htmlfile", "xhr-polling", "jsonp-polling"]);
    return io.set("store", new SocketRedisStore({
      redis: require('socket.io/node_modules/redis'),
      redisPub: pub,
      redisSub: sub,
      redisClient: store
    }));
  });

  /*
   Server routes
  */


  UserController = require('./app/controllers/user_controller');

  DeviceController = require('./app/controllers/device_controller');

  MessageController = require('./app/controllers/message_controller');

  userController = new UserController;

  deviceController = new DeviceController;

  messageController = new MessageController;

  applications = app.resource('applications', new (require('./app/controllers/application_controller')));

  users = app.resource('users', userController);

  messages = app.resource('messages', messageController);

  devices = app.resource('devices', deviceController);

  applications.add(users);

  applications.add(devices);

  users.add(messages);

  users.add(devices);

  users = app.resource('users', userController);

  devices = app.resource('devices', deviceController);

  messages = app.resource('messages', messageController);

  webClientController = new WebClientController(app, io);

  socketController = new SocketController(io);

  /*
   Kue process queue
  */


  kue.app.listen(3001);

  messageWorker = new MessageWorker(io, 20);

}).call(this);
